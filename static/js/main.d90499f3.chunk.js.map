{"version":3,"sources":["components/misc/proxyURL.js","components/discreateslider/discreateslider.js","components/lin-reg/linReg.js","components/svm/svmChart.js","components/svm/svmSlider.js","components/penalty/penalty.js","components/svm/svm.js","components/kmeans/kmeans.js","components/lda/gaussians.js","components/lda/addGaussianForm.js","components/lda/ldaChart.js","components/lda/lda.js","components/navbar/navbar.js","components/home/homePage.js","components/history/history.js","App.js","serviceWorker.js","index.js"],"names":["PROXY_URL","useStyles","makeStyles","root","width","valuetext","value","DiscreteSlider","props","classes","className","Typography","id","gutterBottom","name","Slider","defaultValue","getAriaValueText","aria-labelledby","valueLabelDisplay","step","marks","min","max","LinReg","state","handleSubmit","bind","event","preventDefault","data","FormData","target","fetch","method","body","Header","size","Grid","style","marginTop","container","spacing","item","xs","display","flexDirection","alignItems","onSubmit","this","Button","type","variant","color","Component","properMinScaling","n","properMaxScaling","Penalty","React","useState","setValue","FormControl","component","FormLabel","RadioGroup","aria-label","onChange","FormControlLabel","control","Radio","label","SVM","KMeans","Gaussians","means","covMats","toggle","deletePair","prevProps","setState","List","map","meanVec","i","Item","key","math","onClick","_","Icon","validNumber","str","trimmed","trim","length","isFinite","getMetadata","covarianceMatrices","a","async","headers","JSON","stringify","response","json","metadata","AddGaussianForm","x","status","y","varX","varY","covXY","onNewInput","updateMetadata","then","Form","class","Input","e","newX","newY","newVarX","newVarY","newCovXY","primary","disabled","newMean","Number","newCovMat","colors","LDAChart","height","radius","margin","left","right","top","bottom","drawWidth","drawHeight","update","allPoints","points","concat","line","xMin","d3","d","xMax","yMin","yMax","xScale","domain","range","yScale","circles","chartArea","selectAll","enter","append","merge","attr","transition","duration","exit","remove","curve","ldaLine","xAxisFunction","scale","ticks","yAxisFunction","xAxis","call","yAxis","updateScales","updateAxes","updatePoints","updateLines","ref","node","transform","LDA","meanVector","covMat","newMetadata","filter","idx","theme","flexGrow","justifyContent","menuButton","marginRight","button","formControl","minWidth","NavBar","history","useHistory","pushLink","link","push","AppBar","position","Toolbar","onCLick","HomePage","uploadFile","ev","uploadInput","files","accept","single","valud","App","Fragment","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d90499f3.chunk.js","sourcesContent":["export const PROXY_URL = \"http://localhost:5000\";","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Slider from '@material-ui/core/Slider';\n\nconst useStyles = makeStyles({\n  root: {\n    width: 300,\n  },\n});\n\nfunction valuetext(value) {\n  return `${value}`;\n}\n\nexport default function DiscreteSlider(props) {\n  const classes = useStyles();\n  let name = 'slider';\n  return (\n    <div className={classes.root}>\n      <Typography id=\"discrete-slider\" gutterBottom>\n        {props.name}\n      </Typography>\n      <Slider\n        defaultValue={props.defaultValue}\n        getAriaValueText={valuetext}\n        aria-labelledby=\"discrete-slider\"\n        valueLabelDisplay=\"auto\"\n        step={props.step} \n        marks\n        min={props.min}\n        max={props.max}\n      />\n    </div>\n  );\n}\n","import React, {Component} from 'react';\nimport { Header } from 'semantic-ui-react';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport {PROXY_URL} from '../misc/proxyURL';\nimport DiscreteSlider from '../discreateslider/discreateslider';\nimport './linReg.css';\n\nexport class LinReg extends Component {\n    constructor() {\n        super();\n        this.state = {\n            // points: [{x: 1, y: 2}, {x: 2, y: 1}, {x: 3, y: 4}],\n            // metadata: {\n            //     bestFitLine: [{x: 1, y: 1.33}, {x: 3, y: 3.33}],\n            //     m: 1,\n            //     b: 0.33,\n            //     residual: 2.67\n            // },\n            // toggle: 0\n        };\n        this.handleSubmit = this.handleSubmit.bind(this);\n    };\n\n    handleSubmit(event) {\n        event.preventDefault();\n        \n        const data = new FormData(event.target);\n        \n        fetch(PROXY_URL + '/train/svm', {\n          method: 'POST',\n          body: data,\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                <Header className='title'\n                        size='huge'>\n                    Linear Regression\n                </Header>\n                <Grid style={{ marginTop: '500px' }} container spacing={0}>\n                    <Grid item xs={3} style={{\n                        display: 'flex',\n                        flexDirection: 'column',\n                        alignItems: 'left'\n                    }}>\n                        <form onSubmit={this.handleSubmit}>\n                            <DiscreteSlider name={'Test Split'} defaultValue={0.2} step={0.1} min={0} max={1}/>\n                            <br /><br />\n                            <Button type=\"submit\" value=\"Submit\" variant=\"contained\" color=\"primary\">Train</Button>\n                        </form>\n                    </Grid>\n                    <Grid item xs={3} style={{\n                        display: 'flex',\n                        flexDirection: 'column',\n                        alignItems: 'center'\n                    }}>\n                        <Button style={{ width: '40%' }} variant=\"contained\" color=\"primary\" >\n                            Test \n                        </Button>\n                    </Grid>\n                    <Grid item xs={3} style={{\n                        display: 'flex',\n                        flexDirection: 'column',\n                        alignItems: 'flex-end'\n                    }}>\n                        <Button style={{ width: '40%' }} variant=\"contained\" color=\"primary\" >\n                            Result\n                        </Button>\n                    </Grid>\n                </Grid>\n            </div>\n        );\n    }\n};","import React, {Component} from 'react';\r\nimport * as d3 from 'd3';\r\n\r\n\r\nfunction properMinScaling(n) {\r\n    if (n >= 0)\r\n        return n * 0.9;\r\n    else\r\n        return n * 1.1;\r\n}\r\n\r\nfunction properMaxScaling(n) {\r\n    if (n >= 0)\r\n        return n * 1.1;\r\n    else\r\n        return n * 0.9;\r\n}\r\n\r\nexport class SVMChart extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            width: 800,\r\n            height: 400,\r\n            radius: 5,\r\n            margin: {\r\n                left: 50,\r\n                right: 10,\r\n                top: 20,\r\n                bottom: 50\r\n            }\r\n        };\r\n\r\n        this.drawWidth = this.state.width - this.state.margin.left - this.state.margin.right;\r\n        this.drawHeight = this.state.height - this.state.margin.top - this.state.margin.bottom;\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.update();\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        this.update();\r\n    };\r\n\r\n    updateScales() {\r\n        const allPoints = this.props.points\r\n            .concat(this.props.boundaryLine)\r\n            .concat(this.props.upperLine)\r\n            .concat(this.props.lowerLine);\r\n        \r\n        let xMin = d3.min(allPoints, (d) => properMinScaling(+d.x));\r\n        let xMax = d3.max(allPoints, (d) => properMaxScaling(+d.x));\r\n        let yMin = d3.min(allPoints, (d) => properMinScaling(+d.y));\r\n        let yMax = d3.max(allPoints, (d) => properMaxScaling(+d.y));\r\n\r\n        this.xScale = d3.scaleLinear().domain([xMin, xMax]).range([0, this.drawWidth])\r\n        this.yScale = d3.scaleLinear().domain([yMax, yMin]).range([0, this.drawHeight])\r\n    }\r\n    \r\n    updatePoints() {\r\n        let circles = d3.select(this.chartArea).selectAll('circle').data(this.props.points);\r\n\r\n        circles.enter().append('circle')\r\n            .merge(circles)\r\n            .attr('r', (d) => this.state.radius)\r\n            .attr('fill', (d) => {\r\n                if (d.label === 1)\r\n                    return \"red\";\r\n                else\r\n                    return \"blue\";\r\n            })\r\n            .attr('label', (d) => d.label)\r\n            .transition().duration(500)\r\n            .attr('cx', (d) => this.xScale(d.x))\r\n            .attr('cy', (d) => this.yScale(d.y))\r\n\r\n        circles.exit().remove();\r\n    }\r\n\r\n    updateLines() {\r\n        const allPoints = [this.props.boundaryLine, this.props.upperLine, this.props.lowerLine];\r\n\r\n        const line = d3.line()\r\n            .x((d) => this.xScale(+d.x))\r\n            .y((d) => this.yScale(+d.y))\r\n            .curve(d3.curveMonotoneX);\r\n\r\n        let svmLines = d3.select(this.chartArea)\r\n            .selectAll('path')\r\n            .data(allPoints);\r\n        \r\n        svmLines.enter().append('path')\r\n            .merge(svmLines)\r\n            .attr('class', (_, i) => {\r\n                if (i !== 0)\r\n                    return 'dashed';\r\n            })\r\n            .attr('fill', 'none')\r\n            .attr('stroke', (_, i) => {\r\n                return this.props.colors[i];\r\n            })\r\n            .attr('stroke-width', 3)\r\n            .transition().duration(500)\r\n            .attr('d', (d) => line(d))\r\n    }\r\n    \r\n    updateAxes() {\r\n        let xAxisFunction = d3.axisBottom()\r\n            .scale(this.xScale)\r\n            .ticks(5, 's');\r\n\r\n        let yAxisFunction = d3.axisLeft()\r\n            .scale(this.yScale)\r\n            .ticks(5, 's');\r\n\r\n        d3.select(this.xAxis)\r\n            .call(xAxisFunction);\r\n\r\n        d3.select(this.yAxis)\r\n            .call(yAxisFunction);\r\n    }\r\n    \r\n    update() {\r\n        this.updateScales();\r\n        this.updateAxes();\r\n        this.updatePoints();\r\n        this.updateLines();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"svm__chart\">\r\n                <svg className=\"chart\" width={this.state.width} height={this.state.height}>\r\n                    <g ref={(node) => { this.chartArea = node; }}\r\n                        transform={`translate(${this.state.margin.left}, ${this.state.margin.top})`} />\r\n\r\n                    {/* Axes */}\r\n                    <g ref={(node) => { this.xAxis = node; }}\r\n                        transform={`translate(${this.state.margin.left}, ${this.state.height - this.state.margin.bottom})`}></g>\r\n                    <g ref={(node) => { this.yAxis = node; }}\r\n                        transform={`translate(${this.state.margin.left}, ${this.state.margin.top})`}></g>\r\n                </svg>\r\n            </div>\r\n\r\n        )\r\n    }\r\n};","import React, {Component} from 'react';\r\nimport {Form} from 'semantic-ui-react';\r\n\r\n\r\nexport class SVMSlider extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            c: this.props.c\r\n        }\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className='svm__slider'>\r\n                <Form>\r\n                    <Form.Input \r\n                        label={'Value of C: ' + this.state.c}\r\n                        min={0.01}\r\n                        max={1}\r\n                        name='c'\r\n                        onChange={e => {\r\n                            this.setState({ c: e.target.value });\r\n                            this.props.updateC(e.target.value);\r\n                        }}\r\n                        step={0.001}\r\n                        type='range'\r\n                        value={this.state.c}\r\n                    />\r\n                </Form>\r\n            </div>\r\n        );\r\n    }\r\n};","import React from 'react';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\n\nexport default function Penalty() {\n  const [value, setValue] = React.useState('l1');\n\n  const handleChange = (event) => {\n    setValue(event.target.value);\n  };\n\n  return (\n    <FormControl component=\"fieldset\">\n      <FormLabel component=\"legend\">Penalty</FormLabel>\n      <RadioGroup aria-label=\"penalty\" name=\"penalty\" value={value} onChange={handleChange}>\n        <FormControlLabel value=\"l1\" control={<Radio />} label=\"L1\" />\n        <FormControlLabel value=\"l2\" control={<Radio />} label=\"L2\" />\n      </RadioGroup>\n    </FormControl>\n  );\n}\n","import React, {Component} from 'react';\nimport {SVMChart} from './svmChart';\nimport {SVMSlider} from './svmSlider';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport { Header } from 'semantic-ui-react';\nimport {PROXY_URL} from '../misc/proxyURL';\nimport Penalty from '../penalty/penalty';\nimport DiscreteSlider from '../discreateslider/discreateslider';\nimport './svm.css';\n\nexport class SVM extends Component {\n    constructor() {\n        super();\n        this.state = {\n            // points: [{x: 1, y: 2, label: 1}, {x: 2, y: 1, label: -1}, {x: 3, y: 4, label: 1}],\n            // c: 1,\n            // metadata: {\n            //     boundaryLine: [{x: 0.0, y: 0.0}, {x: 4.0, y: 3.996}],\n            //     upperLine: [{x: 0.0, y: 0.9995}, {x: 4.0, y: 4.9955}], \n            //     lowerLine: [{x: 0.0, y: -0.9995}, {x: 4.0, y: 2.9965}],\n            //     colors: ['#000000', '#FF0000', '#0000FF'],\n            //     accuracy: '100.00%'\n            // },\n            // toggle: 0\n        };\n        this.handleSubmit = this.handleSubmit.bind(this);\n    };\n\n    handleSubmit(event) {\n        event.preventDefault();\n        \n        const data = new FormData(event.target);\n        \n        fetch(PROXY_URL + '/train/svm', {\n          method: 'POST',\n          body: data,\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                <Header className='title'\n                        size='huge'>\n                    Support Vector Machine\n                </Header> \n                <Grid style={{ marginTop: '500px' }} container spacing={0}>\n                <Grid item xs={3} style={{\n                    display: 'flex',\n                    flexDirection: 'column',\n                    alignItems: 'left'\n                }}>\n                    <form onSubmit={this.handleSubmit}>\n                        <Penalty/>\n                        <br /><br />\n                        <DiscreteSlider name={'Test Split'} defaultValue={0.2} step={0.1} min={0} max={1}/>\n                        <br /><br />\n                        <DiscreteSlider name={'C'} defaultValue={1} step={0.1} min={0} max={1}/>\n                        <br /><br />\n                        <Button type=\"submit\" value=\"Submit\" variant=\"contained\" color=\"primary\">Train</Button>\n                    </form>\n                </Grid>\n                <Grid item xs={3} style={{\n                    display: 'flex',\n                    flexDirection: 'column',\n                    alignItems: 'center'\n                }}>\n                    <Button type=\"submit\" variant=\"contained\" color=\"primary\" >Test</Button>\n                </Grid>\n                <Grid item xs={3} style={{\n                    display: 'flex',\n                    flexDirection: 'column',\n                    alignItems: 'flex-end'\n                }}>\n                    <Button type=\"sublit\"  variant=\"contained\" color=\"primary\" >\n                        Result\n                    </Button>\n                </Grid>\n            </Grid>\n        </div>\n        );\n    }\n};","import React, {Component} from 'react';\r\nimport { Header } from 'semantic-ui-react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport DiscreteSlider from '../discreateslider/discreateslider';\r\nimport {PROXY_URL} from '../misc/proxyURL';\r\nimport './kmeans.css';\r\n\r\nconst colors = [\r\n    'red',\r\n    'green',\r\n    'blue',\r\n    'orange',\r\n    'green',\r\n    'sienna',\r\n    'peachpuff',\r\n    'purple',\r\n    'pink',\r\n    'turquoise'\r\n];\r\n\r\nexport class KMeans extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            // points: [{x: 1, y: 2, label: 0}, {x: 2, y: 1, label: 0}, {x: 3, y: 4, label: 0}],\r\n            // k: 1,\r\n            // centroids: [{x: 2.0, y: 2.3333333333333335, label: 0}],\r\n            // toggle: 0\r\n        };\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    };\r\n\r\n    handleSubmit(event) {\r\n        event.preventDefault();\r\n        \r\n        const data = new FormData(event.target);\r\n        \r\n        fetch(PROXY_URL + '/train/kmeans', {\r\n          method: 'POST',\r\n          body: data,\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Header className='title'\r\n                        size='huge'\r\n                >\r\n                    K-Means\r\n                </Header>\r\n                <Grid style={{ marginTop: '500px' }} container spacing={0}>\r\n                    <Grid item xs={3} style={{\r\n                        display: 'flex',\r\n                        flexDirection: 'column',\r\n                        alignItems: 'left'\r\n                    }}>\r\n                        <form onSubmit={this.handleSubmit}>\r\n                            <DiscreteSlider name={'K'} defaultValue={2} step={1} min={2} max={10}/>\r\n                            <br /><br />\r\n                            <Button type=\"submit\" value=\"Submit\" variant=\"contained\" color=\"primary\">Train</Button>\r\n                        </form>\r\n                    </Grid>\r\n                    <Grid item xs={3} style={{\r\n                        display: 'flex',\r\n                        flexDirection: 'column',\r\n                        alignItems: 'center'\r\n                    }}>\r\n                        <Button style={{ width: '40%' }} variant=\"contained\" color=\"primary\" >\r\n                            Test \r\n                        </Button>\r\n                    </Grid>\r\n                    <Grid item xs={3} style={{\r\n                        display: 'flex',\r\n                        flexDirection: 'column',\r\n                        alignItems: 'flex-end'\r\n                    }}>\r\n                        <Button style={{ width: '40%' }} variant=\"contained\" color=\"primary\" >\r\n                            Result\r\n                        </Button>\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        );\r\n    }\r\n};","import React, {Component} from 'react';\nimport {List, Button, Icon} from 'semantic-ui-react';\nimport {InlineMath} from 'react-katex';\nimport './gaussians.css';\n\nexport class Gaussians extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            means: this.props.means,\n            covMats: this.props.covMats,\n            toggle: this.props.toggle,\n            deletePair: this.props.deletePair\n        };\n    };\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.toggle !== this.props.toggle) {\n            this.setState(this.props);\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"lda__points\">\n                <h2><u>Gaussian Classes</u>:</h2>\n                <div className=\"lda__points-list\">\n                    <List>\n                    {this.state.means.map((meanVec, i) => {\n                        return (\n                            <List.Item key={i}>\n                                <header className='point-row'>\n                                    <span className='point-row__point'>\n                                    (   <InlineMath math='\\mu_X = ' /> &nbsp; {meanVec[0]}, &nbsp;\n                                        <InlineMath math='\\mu_Y = ' /> &nbsp; {meanVec[1]},  &nbsp;\n                                        <InlineMath math='\\sigma_X^2 = ' /> &nbsp; {this.state.covMats[i][0][0]}, &nbsp;\n                                        <InlineMath math='\\sigma_Y^2 = ' /> &nbsp; {this.state.covMats[i][1][1]},  &nbsp;\n                                        <InlineMath math='\\sigma_{XY} = ' /> &nbsp; {this.state.covMats[i][0][1]}\n                                    )\n                                    </span>\n                                    <Button className='point-row__delete'\n                                        onClick={_ => {\n                                            this.state.deletePair(i);\n                                        }\n                                    }>\n                                        <Icon name='close' />\n                                    </Button>\n                                </header>\n                            </List.Item>\n                        );\n                    })}\n                    </List>\n                </div>\n            </div>\n        );\n    }\n};","import React, {Component} from 'react';\nimport {Form, Input, Button} from 'semantic-ui-react';\nimport {PROXY_URL} from '../misc/proxyURL';\nimport {InlineMath} from 'react-katex';\nimport './addGaussianForm.css';\n\nfunction validNumber(str) {\n    let trimmed = str.trim();\n    return trimmed.length > 0 && isFinite(trimmed);\n};\n\nexport async function getMetadata(means, covarianceMatrices) {\n    const response = await fetch(PROXY_URL + '/lda', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n            'means': means,\n            'covarianceMatrices': covarianceMatrices\n        })\n    });\n\n    const metadata = await response.json();\n    return metadata;\n}\n\nexport class AddGaussianForm extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            x: {value: '', status: ''}, \n            y: {value: '', status: ''},\n            varX: {value: '', status: ''},\n            varY: {value: '', status: ''},\n            covXY: {value: '', status: ''},\n            onNewInput: this.props.onNewInput,\n            updateMetadata: this.props.updateMetadata,\n            means: this.props.means,\n            covarianceMatrices: this.props.covarianceMatrices\n        };\n    };\n\n    async componentDidUpdate(prevProps) {\n        if (prevProps.means.length !== this.props.means.length) {\n            this.setState({\n                means: this.props.means,\n                covarianceMatrices: this.props.covarianceMatrices\n            });\n\n            const promise = getMetadata(this.props.means, this.props.covarianceMatrices);\n            promise.then(metadata => this.state.updateMetadata(metadata));\n        }\n    };\n\n    render() {\n        return (\n            <div className='lda__form'>\n                <h2><u>Input Gaussian Class</u>:</h2>\n                <Form>\n                    <header className=\"lda-form__row\">\n                        <span class='lda-form__row__sym'>\n                            <InlineMath math='\\mu_X' />:\n                        </span>\n                        <Input  className=\"lda-form__row__input\"\n                                value={this.state.x.value}\n                                onChange={e => {\n                                    let newX = {value: e.target.value, status: ''};\n                                    if (validNumber(e.target.value) || e.target.value.length === 0)\n                                        newX.status = '';\n                                    else\n                                        newX.status = 'Not a number!';\n                                    this.setState({x: newX});\n                                }}\n                        />\n                        <span className='lda-form__row__span'>{this.state.x.status}</span>\n                    </header>\n                    <header className=\"lda-form__row\">\n                        <span class='lda-form__row__sym'>\n                            <InlineMath math='\\mu_Y' />:\n                        </span>\n                        <Input  className=\"lda-form__row__input\"\n                                value={this.state.y.value}\n                                onChange={e => {\n                                    let newY = {value: e.target.value, status: ''};\n                                    if (validNumber(e.target.value) || e.target.value.length === 0)\n                                        newY.status = '';\n                                    else\n                                        newY.status = 'Not a number!';\n                                    this.setState({y: newY});\n                                }}\n                        />\n                        <span className=\"lda-form__row__span\">{this.state.y.status}</span>\n                    </header>\n                    <header className=\"lda-form__row\">\n                        <span class='lda-form__row__sym'>\n                            <InlineMath math='\\sigma_X^2' />:\n                        </span>\n                        <Input  className=\"lda-form__row__input\"\n                                value={this.state.varX.value}\n                                onChange={e => {\n                                    let newVarX = {value: e.target.value, status: ''};\n                                    if (e.target.value.length === 0)\n                                        newVarX.status = '';\n                                    else if (!validNumber(e.target.value))\n                                        newVarX.status = 'Not a number!';\n                                    else if (validNumber(e.target.value) && e.target.value < 0)\n                                        newVarX.status = 'Variance is non-negative!';\n                                    else\n                                        newVarX.status = '';\n                                    this.setState({varX: newVarX});\n                                }}\n                        />\n                        <span className=\"lda-form__row__span\">{this.state.varX.status}</span>\n                    </header>\n                    <header className=\"lda-form__row\">\n                        <span class='lda-form__row__sym'>\n                            <InlineMath math='\\sigma_Y^2' />:\n                        </span>\n                        <Input  className=\"lda-form__row__input\"\n                                value={this.state.varY.value}\n                                onChange={e => {\n                                    let newVarY = {value: e.target.value, status: ''};\n                                    if (e.target.value.length === 0)\n                                        newVarY.status = '';\n                                    else if (!validNumber(e.target.value))\n                                        newVarY.status = 'Not a number!';\n                                    else if (validNumber(e.target.value) && e.target.value < 0)\n                                        newVarY.status = 'Variance is non-negative!';\n                                    else\n                                        newVarY.status = '';\n                                    this.setState({varY: newVarY});\n                                }}\n                        />\n                        <span className=\"lda-form__row__span\">{this.state.varY.status}</span>\n                    </header>\n                    <header className=\"lda-form__row\">\n                        <span class='lda-form__row__sym'>\n                            <InlineMath math='\\sigma_{XY}' />:\n                        </span>\n                        <Input  className=\"lda-form__row__input\"\n                                value={this.state.covXY.value}\n                                onChange={e => {\n                                    let newCovXY = {value: e.target.value, status: ''};\n                                    if (validNumber(e.target.value) || e.target.value.length === 0)\n                                        newCovXY.status = '';\n                                    else\n                                        newCovXY.status = 'Not a number!';\n                                    this.setState({covXY: newCovXY});\n                                }}\n                        />\n                        <span className=\"lda-form__row__span\">{this.state.covXY.status}</span>\n                    </header>\n                    <Button primary\n                            className=\"add-point\"\n                            disabled={!(validNumber(this.state.x.value) && \n                                        validNumber(this.state.y.value) &&\n                                        validNumber(this.state.varX.value) &&\n                                        this.state.varX.value >= 0 &&\n                                        validNumber(this.state.varY.value) &&\n                                        this.state.varY.value >= 0 &&\n                                        validNumber(this.state.covXY.value)\n                                    )}\n                            onClick={async () => {\n                                let newMean = [\n                                    Number(this.state.x.value), \n                                    Number(this.state.y.value)\n                                ]\n                                let newCovMat = [\n                                    [this.state.varX.value, this.state.covXY.value],\n                                    [this.state.covXY.value, this.state.varY.value]\n                                ]\n                                this.state.onNewInput(newMean, newCovMat);\n                                this.setState({\n                                    x: {value: '', status: ''},\n                                    y: {value: '', status: ''},\n                                    varX: {value: '', status: ''},\n                                    varY: {value: '', status: ''},\n                                    covXY: {value: '', status: ''}\n                                });\n                            }\n                    }>\n                        Add Gaussian Class\n                    </Button>\n                </Form>\n            </div>\n        );\n    }\n};","import React, {Component} from 'react';\nimport * as d3 from 'd3';\n\nconst colors = [\n    'red',\n    'green',\n    'blue',\n    'orange',\n    'green',\n    'sienna',\n    'peachpuff',\n    'purple',\n    'pink',\n    'turquoise'\n];\n\nfunction properMinScaling(n) {\n    if (n >= 0)\n        return n * 0.9;\n    else\n        return n * 1.1;\n}\n\nfunction properMaxScaling(n) {\n    if (n >= 0)\n        return n * 1.1;\n    else\n        return n * 0.9;\n}\n\nexport class LDAChart extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            width: 800,\n            height: 400,\n            radius: 3,\n            margin: {\n                left: 50,\n                right: 10,\n                top: 20,\n                bottom: 50\n            }\n        };\n\n        this.drawWidth = this.state.width - this.state.margin.left - this.state.margin.right;\n        this.drawHeight = this.state.height - this.state.margin.top - this.state.margin.bottom;\n    };\n\n    componentDidMount() {\n        this.update();\n    }\n\n    componentDidUpdate() {\n        this.update();\n    };\n\n    updateScales() {\n        const allPoints = this.props.points\n            .concat(this.props.line);\n        \n        let xMin = d3.min(allPoints, (d) => properMinScaling(+d.x));\n        let xMax = d3.max(allPoints, (d) => properMaxScaling(+d.x));\n        let yMin = d3.min(allPoints, (d) => properMinScaling(+d.y));\n        let yMax = d3.max(allPoints, (d) => properMaxScaling(+d.y));\n\n        this.xScale = d3.scaleLinear().domain([xMin, xMax]).range([0, this.drawWidth])\n        this.yScale = d3.scaleLinear().domain([yMax, yMin]).range([0, this.drawHeight])\n    }\n    \n    updatePoints() {\n        let circles = d3.select(this.chartArea).selectAll('circle').data(this.props.points);\n\n        circles.enter().append('circle')\n            .merge(circles)\n            .attr('r', (d) => this.state.radius)\n            .attr('fill', (d) => {\n                return colors[d.label % colors.length];\n            })\n            .attr('label', (d) => d.label)\n            .transition().duration(500)\n            .attr('cx', (d) => this.xScale(d.x))\n            .attr('cy', (d) => this.yScale(d.y))\n\n        circles.exit().remove();\n    }\n\n    updateLines() {\n        const allPoints = [this.props.line];\n\n        const line = d3.line()\n            .x((d) => this.xScale(+d.x))\n            .y((d) => this.yScale(+d.y))\n            .curve(d3.curveMonotoneX);\n\n        let ldaLine = d3.select(this.chartArea)\n            .selectAll('path')\n            .data(allPoints);\n        \n        ldaLine.enter().append('path')\n            .merge(ldaLine)\n            .attr('fill', 'none')\n            .attr('stroke', (_, i) => {\n                return 'black';\n            })\n            .attr('stroke-width', 3)\n            .transition().duration(500)\n            .attr('d', (d) => line(d))\n    }\n    \n    updateAxes() {\n        let xAxisFunction = d3.axisBottom()\n            .scale(this.xScale)\n            .ticks(5, 's');\n\n        let yAxisFunction = d3.axisLeft()\n            .scale(this.yScale)\n            .ticks(5, 's');\n\n        d3.select(this.xAxis)\n            .call(xAxisFunction);\n\n        d3.select(this.yAxis)\n            .call(yAxisFunction);\n    }\n    \n    update() {\n        this.updateScales();\n        this.updateAxes();\n        this.updatePoints();\n        this.updateLines();\n    }\n\n    render() {\n        return (\n            <div className=\"lda__chart\">\n                <svg className=\"chart\" width={this.state.width} height={this.state.height}>\n                    <g ref={(node) => { this.chartArea = node; }}\n                        transform={`translate(${this.state.margin.left}, ${this.state.margin.top})`} />\n\n                    {/* Axes */}\n                    <g ref={(node) => { this.xAxis = node; }}\n                        transform={`translate(${this.state.margin.left}, ${this.state.height - this.state.margin.bottom})`}></g>\n                    <g ref={(node) => { this.yAxis = node; }}\n                        transform={`translate(${this.state.margin.left}, ${this.state.margin.top})`}></g>\n                </svg>\n            </div>\n\n        )\n    }\n};","import React, {Component} from 'react';\nimport {Gaussians} from './gaussians'\nimport {AddGaussianForm} from './addGaussianForm';\nimport {LDAChart} from './ldaChart';\nimport { Header } from 'semantic-ui-react';\nimport './lda.css';\n\nexport class LDA extends Component {\n    constructor() {\n        super();\n        this.state = {\n            means: [],\n            covarianceMatrices: [],\n            metadata: {\n                points: [],\n                line: []\n            },\n            toggle: 0\n        };\n    };\n\n    render() {\n        return (\n            <div>\n                <Header className='title'\n                        size='huge'\n                >\n                    Linear Discriminant Analysis\n                </Header>\n                <div className=\"lda\">\n                    <AddGaussianForm \n                        means={this.state.means}\n                        covarianceMatrices={this.state.covarianceMatrices}\n                        onNewInput={\n                            (meanVector, covMat) => this.setState({\n                                means: [...this.state.means, meanVector],\n                                covarianceMatrices: [...this.state.covarianceMatrices, covMat]\n                            })\n                        }\n                        updateMetadata={\n                            newMetadata => this.setState({\n                                metadata: newMetadata,\n                                toggle: (this.state.toggle + 1) % 2\n                            })\n                        }\n                    />\n                    <Gaussians \n                        means={this.state.means}\n                        covMats={this.state.covarianceMatrices}\n                        toggle={this.state.toggle}\n                        deletePair={\n                            i => this.setState({\n                                    means: this.state.means.filter((_, idx) => i !== idx),\n                                    covarianceMatrices: this.state.covarianceMatrices.filter((_, idx) => i !== idx),\n                                    toggle: (this.state.toggle + 1) % 2\n                                })\n                        }\n                    />\n                    <LDAChart \n                        points={this.state.metadata.points}\n                        line={this.state.metadata.line}\n                    />\n                </div>\n            </div>\n        );\n    }\n};","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\n// import history from './../history/history';\nimport { useHistory } from 'react-router-dom';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n    justifyContent: \"center\",\n    alignItems: \"center\"\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  button: {\n    display: 'block',\n    marginTop: theme.spacing(2),\n    color:\"inherit\",\n  },\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120,\n  },\n}));\n\nexport const NavBar = _ => {\n  const classes = useStyles();\n  let history = useHistory();\n  const pushLink = link => {\n    history.push(link);\n  }\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar variant=\"dense\">\n          <Typography variant=\"h6\" color=\"inherit\">\n            DWM Mini Project \n          </Typography>\n        </Toolbar>\n        <div>\n          <Button style={{ width: '8%' }} color=\"inherit\"onClick={()=>{ pushLink('/')}}>Home</Button>\n          <Button style={{ width: '8%' }} color=\"inherit\"onClick={()=>{ pushLink('/linear-regression')}}>Linear</Button>\n          <Button style={{ width: '8%' }} color=\"inherit\"onClick={()=>{pushLink('/k-means')}}>K-Means</Button>\n          <Button style={{ width: '8%' }} color=\"inherit\"onClick={()=>{pushLink('/svm')}}>SVM</Button>\n          <Button style={{ width: '8%' }} color =\"inherit\"onCLick={()=>{pushLink('/lda')}} >LDA</Button>\n        </div>\n      </AppBar> \n    </div>      \n  );\n}\n","import React from 'react';\nimport {Header} from 'semantic-ui-react';\nimport Button from \"@material-ui/core/Button\";\nimport {PROXY_URL} from '../misc/proxyURL';\nimport './homePage.css';\n\nclass HomePage extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n        };\n        this.uploadFile = this.uploadFile.bind(this);\n      }\n    \n      uploadFile(ev) {\n        ev.preventDefault();\n    \n        const data = new FormData();\n        data.append('file', this.uploadInput.files[0]);\n    \n        fetch(PROXY_URL + '/upload', {\n          method: 'POST',\n          body: data,\n        });\n    }\n\n    render() {\n        return (\n        <div className='home-page'>\n            <Header size='huge'>\n                Welcome to the Classical Machine Learning Visualizer!\n            </Header>\n            <br/>\n            <Header size='huge'>               \n                Upload the dataset (in csv, json or yaml) on which you would like to visualize the Machine Learning models.\n            </Header>\n            <br/>\n            <form onSubmit={this.uploadFile}>\n                <div>\n                    <input accept=\".csv, .json, .yml\" single ref={(ref) => { this.uploadInput = ref; }} type=\"file\" />\n                </div>\n                <br/>\n                <div>\n                    <Button type=\"submit\" valud=\"Submit\" variant=\"contained\" color=\"primary\">Submit</Button>\n                </div>\n            </form>\n        </div>\n        );\n }\n}\n  \nexport default HomePage;\n  ","import { createBrowserHistory as history} from 'history';\r\n\r\nexport default history();","import React, { Component } from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport { LinReg } from './components/lin-reg/linReg';\nimport { SVM } from './components/svm/svm';\nimport { KMeans } from './components/kmeans/kmeans';\nimport { LDA } from './components/lda/lda';\nimport { NavBar } from './components/navbar/navbar';\nimport HomePage from './components/home/homePage';\nimport history from './components/history/history';\nimport './App.css';\n\nexport default class App extends Component {\n    render() {\n        return ( <BrowserRouter history={history} >\n            <React.Fragment >\n            <NavBar/>\n            <div className = \"main-content\" >\n            <Switch>\n            <Route path = \"/linear-regression\"\n            component = { LinReg }/>{\" \"} \n            <Route path = \"/svm\"\n            component = { SVM }\n            />{\" \"} \n            <Route path = \"/k-means\"\n            component = { KMeans }\n            />{\" \"} \n            <Route path = \"/lda\"\n            component = { LDA }\n            />{\" \"}\n            <Route path = \"/\"\n            component = { HomePage }\n            />{\" \"}\n            </Switch>{\" \"}\n            </div>{\" \"} \n            </React.Fragment>{\" \"} \n            </BrowserRouter>\n        );\n    }\n};","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'semantic-ui-css/semantic.min.css'\nimport 'katex/dist/katex.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}